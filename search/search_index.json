{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"farcaster-py","text":"[![Build status](https://github.com/a16z/farcaster-py/workflows/build/badge.svg?branch=master&amp;event=push)](https://github.com/fmhall/farcaster/actions?query=workflow%3Abuild) [![Python Version](https://img.shields.io/pypi/pyversions/farcaster.svg)](https://pypi.org/project/farcaster/) [![Dependencies Status](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)](https://github.com/a16z/farcaster-py/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20author%3Aapp%2Fdependabot) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![Security: bandit](https://img.shields.io/badge/security-bandit-green.svg)](https://github.com/PyCQA/bandit) [![Pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white)](https://github.com/a16z/farcaster-py/blob/master/.pre-commit-config.yaml) [![Semantic Versions](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--versions-e10079.svg)](https://github.com/a16z/farcaster-py/releases) [![License](https://img.shields.io/github/license/fmhall/farcaster)](https://github.com/a16z/farcaster-py/blob/master/LICENSE) ![Coverage Report](assets/images/coverage.svg)  farcaster-py is a modern Python SDK for the Farcaster Protocol"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U farcaster\n</code></pre> <p>or install with <code>Poetry</code></p> <pre><code>poetry add farcaster\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To use the Farcaster API you need to generate an access token. Here is one way to do that:</p> <p>First install eth-account and dotenv:</p> <pre><code>pip install eth-account python-dotenv # Or 'poetry add eth-account python-dotenv'\n</code></pre> <p>Then you can use a script like this to generate the access token. Note that you can increase the expiration date of the token if you don't want to worry about rotation.</p> <pre><code>import time\nimport os\n\nfrom farcaster import MerkleApiClient\nfrom eth_account.account import Account\nfrom dotenv import load_dotenv\n\nload_dotenv()\nAccount.enable_unaudited_hdwallet_features()\nETH_ACCOUNT_SIGNER = Account.from_mnemonic(os.environ.get(\"&lt;MNEMONIC_ENV_VAR&gt;\"))\n\nclient = MerkleApiClient(wallet=ETH_ACCOUNT_SIGNER)\n\nexpiry_ms = int(time.time() + 600)*1000 # This auth token will be valid for 10 minutes. You can increase this up to 1 year\n\naccess_token = client.create_new_auth_token(expires_at=expiry_ms)\n\nprint(access_token) # \"MK-....\"\n</code></pre> <p>Save the auth token somewhere like a <code>.env</code> file in your working directory.</p> <p>From now on you can initialize your client like this:</p> <pre><code>from farcaster import MerkleApiClient\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclient = MerkleApiClient(access_token=os.environ.get(\"&lt;AUTH_ENV_VAR&gt;\"))\n\nprint(client.get_healthcheck())\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Get a cast</p> <pre><code>response = fcc.get_cast(\"0x321712dc8eccc5d2be38e38c1ef0c8916c49949a80ffe20ec5752bb23ea4d86f\")\nprint(response.cast.author.username) # \"dwr\"\n</code></pre> <p>Publish a cast</p> <pre><code>from farcaster.models import CastsPostRequest\n\ncast_body = CastsPostRequest(text=\"Hello world!\")\nresponse = fcc.post_cast(cast_body)\nprint(response.cast.hash) # \"0x....\"\n</code></pre> <p>Get a user by username</p> <pre><code>response = fcc.get_user_by_username(\"mason\")\nprint(response.user.username) # \"mason\"\n</code></pre> <p>Get a user's followers using a fid (farcaster ID)</p> <pre><code>response = fcc.get_followers(fid=50)\nprint(response.users) # [user1, user2, user3]\n</code></pre> <p>Get users who recently joined Farcaster</p> <pre><code>response = fcc.get_recent_users()\nprint(response.users) # [user1, user2, user3]\n</code></pre> <p>Get your own user object</p> <pre><code>response = fcc.get_me()\nprint(response.user.username) # \"you\"\n</code></pre> <p>Recast a cast</p> <pre><code>response = fcc.recast(\"0x....\")\nprint(response.cast.hash) # \"0x....\"\n</code></pre> <p>and many, many more things.</p>"},{"location":"#releases","title":"\ud83d\udcc8 Releases","text":"<p>You can see the list of available releases on the GitHub Releases page.</p> <p>We follow Semantic Versions specification.</p> <p>We use <code>Release Drafter</code>. As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you\u2019re ready. With the categories option, you can categorize pull requests in release notes using labels.</p>"},{"location":"#list-of-labels-and-corresponding-titles","title":"List of labels and corresponding titles","text":"Label Title in Releases <code>enhancement</code>, <code>feature</code> \ud83d\ude80 Features <code>bug</code>, <code>refactoring</code>, <code>bugfix</code>, <code>fix</code> \ud83d\udd27 Fixes &amp; Refactoring <code>build</code>, <code>ci</code>, <code>testing</code> \ud83d\udce6 Build System &amp; CI/CD <code>breaking</code> \ud83d\udca5 Breaking Changes <code>documentation</code> \ud83d\udcdd Documentation <code>dependencies</code> \u2b06\ufe0f Dependencies updates <p>You can update it in <code>release-drafter.yml</code>.</p> <p>GitHub creates the <code>bug</code>, <code>enhancement</code>, and <code>documentation</code> labels for you. Dependabot creates the <code>dependencies</code> label. Create the remaining labels on the Issues tab of your GitHub repository, when you need them.</p>"},{"location":"#license","title":"\ud83d\udee1 License","text":"<p>This project is licensed under the terms of the <code>MIT</code> license. See LICENSE for more details.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#farcaster.client.MerkleApiClient","title":"<code>MerkleApiClient</code>","text":"<p>The MerkleApiClient class is a wrapper around the Farcaster API. It also provides a number of helpful methods and utilities for interacting with the protocol. Pydantic models are used under the hood to validate the data returned from the API.</p> Source code in <code>farcaster/client.py</code> <pre><code>class MerkleApiClient:\n\"\"\"The MerkleApiClient class is a wrapper around the Farcaster API.\n    It also provides a number of helpful methods and utilities for interacting with the protocol.\n    Pydantic models are used under the hood to validate the data returned from the API.\n    \"\"\"\n\n    config: ConfigurationParams\n    wallet: Optional[LocalAccount]\n    access_token: NoneStr\n    sessions: requests.Session\n\n    def __init__(\n        self,\n        wallet: Optional[LocalAccount] = None,\n        access_token: NoneStr = None,\n        **data: Any,\n    ):\n        self.config = ConfigurationParams(**data)\n        self.wallet = wallet\n        self.access_token = access_token\n        self.session = requests.Session()\n        if self.access_token:\n            self.session.headers.update(\n                {\"Authorization\": f\"Bearer {self.access_token}\"}\n            )\n\n    def get_base_path(self):\n        return self.config.base_path\n\n    def get_base_options(self):\n        return self.config.base_options\n\n    def _get(\n        self,\n        path: str,\n        params: Dict[Any, Any] = {},\n        json: Dict[Any, Any] = {},\n        headers: Dict[Any, Any] = {},\n    ) -&gt; Dict[Any, Any]:\n        logging.debug(f\"GET {path} {params} {json} {headers}\")\n        response: Dict[Any, Any] = self.session.get(\n            self.config.base_path + path, params=params, json=json, headers=headers\n        ).json()\n        if \"errors\" in response:\n            raise Exception(response[\"errors\"])\n        return response\n\n    def _post(\n        self,\n        path: str,\n        params: Dict[Any, Any] = {},\n        json: Dict[Any, Any] = {},\n        headers: Dict[Any, Any] = {},\n    ) -&gt; Dict[Any, Any]:\n        logging.debug(f\"POST {path} {params} {json} {headers}\")\n        response: Dict[Any, Any] = self.session.post(\n            self.config.base_path + path, params=params, json=json, headers=headers\n        ).json()\n        if \"errors\" in response:\n            raise Exception(response[\"errors\"])\n        return response\n\n    def _put(\n        self,\n        path: str,\n        params: Dict[Any, Any] = {},\n        json: Dict[Any, Any] = {},\n        headers: Dict[Any, Any] = {},\n    ) -&gt; Dict[Any, Any]:\n        logging.debug(f\"PUT {path} {params} {json} {headers}\")\n        response: Dict[Any, Any] = self.session.put(\n            self.config.base_path + path, params=params, json=json, headers=headers\n        ).json()\n        if \"errors\" in response:\n            raise Exception(response[\"errors\"])\n        return response\n\n    def _delete(\n        self,\n        path: str,\n        params: Dict[Any, Any] = {},\n        json: Dict[Any, Any] = {},\n        headers: Dict[Any, Any] = {},\n    ) -&gt; Dict[Any, Any]:\n        logging.debug(f\"DELETE {path} {params} {json} {headers}\")\n        response: Dict[Any, Any] = self.session.delete(\n            self.config.base_path + path, params=params, json=json, headers=headers\n        ).json()\n        if \"errors\" in response:\n            raise Exception(response[\"errors\"])\n        return response\n\n    def get_healthcheck(self) -&gt; bool:\n\"\"\"Check if API is up and running\n\n        Returns:\n            bool: Status of the API\n        \"\"\"\n        response = self.session.get(\"https://api.farcaster.xyz/healthcheck\")\n        return response.ok\n\n    def get_asset(self, token_id: int) -&gt; AssetResult:\n\"\"\"Get asset information\n\n        Args:\n            token_id (int): token ID\n\n        Returns:\n            AssetResult: token information\n        \"\"\"\n        response = self._get(\"asset\", {\"token_id\": token_id})\n        return AssetGetResponse(**response).result\n\n    def get_asset_events(\n        self,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; EventsResult:\n\"\"\"Get events for a given asset\n\n        Args:\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): events to receive, defaults\n                to 25\n\n        Returns:\n            EventsResult: Returns the EventsResult model\n        \"\"\"\n        response = self._get(\n            \"asset-events\",\n            params={\"cursor\": cursor, \"limit\": limit},\n        )\n        return AssetEventsGetResponse(**response).result\n\n    def put_auth(self, auth_params: AuthParams) -&gt; TokenResult:\n\"\"\"Generate a custody bearer token and use it to generate an access token\n\n        Args:\n            auth_params (AuthParams): _description_\n\n        Returns:\n            TokenResult: _description_\n        \"\"\"\n        header = self.generate_custody_auth_header(auth_params)\n        body = AuthPutRequest(params=auth_params)\n        response = requests.put(\n            \"https://api.farcaster.xyz/v2/auth\",\n            json=body.dict(by_alias=True),\n            headers={\"Authorization\": header},\n        ).json()\n        return AuthPutResponse(**response).result\n\n    def delete_auth(self, timestamp: PositiveInt) -&gt; StatusResponse:\n\"\"\"Delete an access token\n\n        Args:\n            timestamp (PositiveInt): The timestamp of the access\n                token to delete\n\n        Returns:\n            StatusResponse: Status of the deletion\n        \"\"\"\n        body = AuthDeleteRequest(params=Timestamp(timestamp=timestamp))\n        response = self._delete(\n            \"auth\",\n            json=body.dict(by_alias=True),\n        )\n        return StatusResponse(**response)\n\n    def get_cast_likes(\n        self,\n        cast_hash: str,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; ReactionsResult:\n\"\"\"Get the likes for a given cast\n\n        Args:\n            cast_hash (str): cast hash\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            ReactionsResult: ReactionsResult model of likes\n        \"\"\"\n        response = self._get(\n            \"cast-likes\",\n            params={\"castHash\": cast_hash, \"cursor\": cursor, \"limit\": limit},\n        )\n        return CastReactionsGetResponse(**response).result\n\n    def like_cast(self, body: CastHash) -&gt; ReactionsResult:\n\"\"\"Like a given cast\n\n        Args:\n            body (CastHash): hash of the cast to like\n\n        Returns:\n            ReactionsResult: Result of liking the cast\n        \"\"\"\n        response = self._put(\n            \"cast-likes\",\n            json=body.dict(by_alias=True),\n        )\n        return CastReactionsPutResponse(**response).result\n\n    def delete_cast_likes(self, cast_hash: str, body: CastHash) -&gt; StatusResponse:\n\"\"\"Remove a like from a cast\n\n        Args:\n            cast_hash (str): hash of the cast to unlike\n            body (CastHash): hash of the cast to unlike\n\n        Returns:\n            StatusResponse: Status of the deletion\n        \"\"\"\n        response = self._delete(\n            \"cast-likes\",\n            params={\"castHash\": cast_hash},\n            json=body.dict(by_alias=True),\n        )\n        return StatusResponse(**response)\n\n    def get_cast_recasters(\n        self,\n        cast_hash: str,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; UsersResult:\n\"\"\"Get the recasters for a given cast\n\n        Args:\n            cast_hash (str): cast hash\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            UsersResult: Model containing the recasters\n        \"\"\"\n        response = self._get(\n            \"cast-recasters\",\n            params={\"castHash\": cast_hash, \"cursor\": cursor, \"limit\": limit},\n        )\n        return CastRecastersGetResponse(**response).result\n\n    def get_cast(\n        self,\n        hash: str,\n    ) -&gt; CastContent:\n\"\"\"Get a specific cast\n\n        Args:\n            hash (str): cast hash\n\n        Returns:\n            CastContent: The cast content\n        \"\"\"\n        response = self._get(\n            \"cast\",\n            params={\"hash\": hash},\n        )\n        return CastGetResponse(**response).result\n\n    def get_all_casts_in_thread(\n        self,\n        thread_hash: str,\n    ) -&gt; CastsResult:\n\"\"\"Get all casts in a thread\n\n        Args:\n            thread_hash (str): hash of the thread\n\n        Returns:\n            CastsResult: Model containing the casts\n        \"\"\"\n        response = self._get(\n            \"all-casts-in-thread\",\n            params={\"threadHash\": thread_hash},\n        )\n        return CastsGetResponse(**response).result\n\n    def get_casts(\n        self,\n        fid: int,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; CastsResult:\n\"\"\"Get the casts for a given fid of a user\n\n        Args:\n            fid (int): Farcaster ID of the user\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            CastsResult: Model containing the casts\n        \"\"\"\n        response = self._get(\n            \"casts\",\n            params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n        )\n        return CastsGetResponse(**response).result\n\n    def post_cast(self, body: CastsPostRequest) -&gt; CastContent:\n\"\"\"Post a cast to Farcaster\n\n        Args:\n            body (CastsPostRequest): The cast data structure\n\n        Returns:\n            CastContent: The result of posting the cast\n        \"\"\"\n        response = self._post(\n            \"casts\",\n            json=body.dict(by_alias=True),\n        )\n        return CastsPostResponse(**response).result\n\n    def delete_cast(self, cast_hash: str) -&gt; StatusResponse:\n\"\"\"Delete a cast\n\n        Args:\n            cast_hash (str): the hash of the cast to delete\n\n        Returns:\n            StatusResponse: Status of the deletion\n        \"\"\"\n        body = CastHash(cast_hash=cast_hash)\n        response = self._delete(\n            \"casts\",\n            json=body.dict(by_alias=True),\n        )\n        return StatusResponse(**response)\n\n    def get_collection(self, collection_id: str) -&gt; CollectionResult:\n\"\"\"Get a specific collection\n\n        Args:\n            collection_id (str): OpenSea collection ID\n\n        Returns:\n            CollectionResult: collection\n        \"\"\"\n        response = self._get(\n            \"collection\",\n            params={\"collectionId\": collection_id},\n        )\n        return CollectionGetResponse(**response).result\n\n    def get_collection_activity(\n        self,\n        collection_id: str,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; EventsResult:\n\"\"\"Get collection activity\n\n        Args:\n            collection_id (str): OpenSea collection ID\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            EventsResult: Model containing events\n        \"\"\"\n        response = self._get(\n            \"collection-activity\",\n            params={\"collectionId\": collection_id, \"cursor\": cursor, \"limit\": limit},\n        )\n        return CollectionActivityGetResponse(**response).result\n\n    def get_collection_assets(\n        self,\n        collection_id: str,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; AssetsResult:\n\"\"\"Get assets in an OpenSea collection\n\n        Args:\n            collection_id (str): OpenSea collection ID\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            AssetsResult: model containing assets\n        \"\"\"\n        response = self._get(\n            \"collection-assets\",\n            params={\"collectionId\": collection_id, \"cursor\": cursor, \"limit\": limit},\n        )\n        return CollectionAssetsGetResponse(**response).result\n\n    def get_collection_owners(\n        self,\n        collection_id: str,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; UsersResult:\n\"\"\"Get the owners of an OpenSea collection\n\n        Args:\n            collection_id (str): OpenSea collection ID\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            UsersResult: model containing users\n        \"\"\"\n        response = self._get(\n            \"collection-owners\",\n            params={\"collectionId\": collection_id, \"cursor\": cursor, \"limit\": limit},\n        )\n        return CollectionOwnersGetResponse(**response).result\n\n    def get_followers(\n        self,\n        fid: int,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; UsersResult:\n\"\"\"Get the followers of a user\n\n        Args:\n            fid (int): Farcaster ID of the user\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            UsersResult: model containing users\n        \"\"\"\n        response = self._get(\n            \"followers\",\n            params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n        )\n        return FollowersGetResponse(**response).result\n\n    def get_following(\n        self,\n        fid: int,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; UsersResult:\n\"\"\"Get the users a user is following\n\n        Args:\n            fid (int): Farcaster ID of the user\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            UsersResult: model containing users\n        \"\"\"\n        response = self._get(\n            \"following\",\n            params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n        )\n        return FollowingGetResponse(**response).result\n\n    def follow_user(self, fid: PositiveInt) -&gt; StatusResponse:\n\"\"\"Follow a user\n\n        Args:\n            fid (PositiveInt): Farcaster ID of the user to follow\n\n        Returns:\n            StatusResponse: Status of the follow\n        \"\"\"\n        body = FollowsPutRequest(target_fid=fid)\n        response = self._put(\n            \"follows\",\n            json=body.dict(by_alias=True),\n        )\n        return StatusResponse(**response)\n\n    def unfollow_user(self, fid: PositiveInt) -&gt; StatusResponse:\n\"\"\"Unfollow a user\n\n        Args:\n            fid (PositiveInt): Farcaster ID of the user to unfollow\n\n        Returns:\n            StatusResponse: Status of the unfollow\n        \"\"\"\n        body = FollowsDeleteRequest(target_fid=fid)\n        response = self._delete(\n            \"follows\",\n            json=body.dict(by_alias=True),\n        )\n        return StatusResponse(**response)\n\n    def get_me(self) -&gt; UserResult:\n\"\"\"Get the current user\n\n        Returns:\n            UserResult: model containing the current user\n        \"\"\"\n        response = self._get(\n            \"me\",\n        )\n        response_model = MeGetResponse(**response).result\n        self.config.username = response_model.user.username\n        return response_model\n\n    def get_mention_and_reply_notifications(\n        self,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; NotificationsResult:\n\"\"\"Get mention and reply notifications\n\n        Args:\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            NotificationsResult: model containing notifications\n        \"\"\"\n        response = self._get(\n            \"mention-and-reply-notifications\",\n            params={\"cursor\": cursor, \"limit\": limit},\n        )\n        return MentionAndReplyNotificationsGetResponse(**response).result\n\n    def recast(self, cast_hash: str) -&gt; CastHash:\n\"\"\"Recast a cast\n\n        Args:\n            cast_hash (str): the cast hash\n\n        Returns:\n            CastHash: model containing the cast hash\n        \"\"\"\n        body = CastHash(cast_hash=cast_hash)\n        response = self._put(\n            \"recasts\",\n            json=body.dict(by_alias=True),\n        )\n        return RecastsPutResponse(**response).result\n\n    def delete_recast(self, cast_hash: str) -&gt; StatusResponse:\n\"\"\"Delete a recast\n\n        Args:\n            cast_hash (str): the cast hash\n\n        Returns:\n            StatusResponse: Status of the recast deletion\n        \"\"\"\n        body = CastHash(cast_hash=cast_hash)\n        response = self._delete(\n            \"recasts\",\n            json=body.dict(by_alias=True),\n        )\n        return StatusResponse(**response)\n\n    def get_user(self, fid: int) -&gt; UserResult:\n\"\"\"Get a user\n\n        Args:\n            fid (int): Farcaster ID of the user\n\n        Returns:\n            UserResult: model containing the user\n        \"\"\"\n        response = self._get(\n            \"user\",\n            params={\"fid\": fid},\n        )\n        return UserGetResponse(**response).result\n\n    def get_user_by_username(\n        self,\n        username: str,\n    ) -&gt; UserResult:\n\"\"\"Get a user by username\n\n        Args:\n            username (str): username of the user\n\n        Returns:\n            UserResult: model containing the user\n        \"\"\"\n        response = self._get(\n            \"user-by-username\",\n            params={\"username\": username},\n        )\n        return UserByUsernameGetResponse(**response).result\n\n    def get_user_by_verification(\n        self,\n        address: str,\n    ) -&gt; UserResult:\n\"\"\"Get a user by verification address\n\n        Args:\n            address (str): address of the user\n\n        Returns:\n            UserResult: model containing the user\n        \"\"\"\n        response = self._get(\n            \"user-by-verification\",\n            params={\"address\": address},\n        )\n        return UserByUsernameGetResponse(**response).result\n\n    def get_user_collections(\n        self,\n        owner_fid: int,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; CollectionsResult:\n\"\"\"Get the collections of a user\n\n        Args:\n            owner_fid (int): Farcaster ID of the user\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            CollectionsResult: model containing collections\n        \"\"\"\n        response = self._get(\n            \"user-collections\",\n            params={\"ownerFid\": owner_fid, \"cursor\": cursor, \"limit\": limit},\n        )\n        return UserCollectionsGetResponse(**response).result\n\n    def get_verifications(\n        self,\n        fid: int,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; VerificationsResult:\n\"\"\"Get the verifications of a user\n\n        Args:\n            fid (int): Farcaster ID of the user\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            VerificationsResult: model containing verifications\n        \"\"\"\n        response = self._get(\n            \"verifications\",\n            params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n        )\n        return VerificationsGetResponse(**response).result\n\n    def get_recent_users(\n        self,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; UsersResult:\n\"\"\"Get recent users\n\n        Args:\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            UsersResult: model containing users\n        \"\"\"\n        response = self._get(\n            \"recent-users\",\n            params={\"cursor\": cursor, \"limit\": limit},\n        )\n        return UsersGetResponse(**response).result\n\n    def get_custody_address(\n        self,\n        username: NoneStr = None,\n        fid: Optional[int] = None,\n    ) -&gt; CustodyAddress:\n\"\"\"Get the custody address of a user\n\n        Args:\n            username (NoneStr, optional): username of a user, defaults\n                to None\n            fid (Optional[int], optional): Farcaster ID, defaults to\n                None\n\n        Returns:\n            CustodyAddress: model containing the custody address\n        \"\"\"\n        assert username or fid, \"fname or fid must be provided\"\n        response = self._get(\n            \"custody-address\",\n            params={\"fname\": username, \"fid\": fid},\n        )\n        return CustodyAddressGetResponse(**response).result\n\n    def get_user_cast_likes(\n        self,\n        fid: int,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 25,\n    ) -&gt; Likes:\n\"\"\"Get the likes of a user\n\n        Args:\n            fid (int): Farcaster ID of the user\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 25\n\n        Returns:\n            Likes: model containing likes\n        \"\"\"\n        response = self._get(\n            \"user-cast-likes\",\n            params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n        )\n        return UserCastLikesGetResponse(**response).result\n\n    def get_recent_casts(\n        self,\n        cursor: NoneStr = None,\n        limit: PositiveInt = 100,\n    ) -&gt; CastsResult:\n\"\"\"Get all recent casts\n\n        Args:\n            cursor (NoneStr, optional): cursor, defaults to None\n            limit (PositiveInt, optional): limit, defaults to 100\n\n        Returns:\n            CastsResult: model containing casts\n        \"\"\"\n        response = self._get(\n            \"recent-casts\",\n            params={\"cursor\": cursor, \"limit\": limit},\n        )\n        return CastsGetResponse(**response).result\n\n    def create_new_auth_token(\n        self, expires_at: PositiveInt, timestamp: PositiveInt = int(time.time() * 1000)\n    ) -&gt; str:\n\"\"\"Create a new access token for a user from the wallet credentials\n\n        Args:\n            expires_at (PositiveInt): Expiration date of the token\n            timestamp (PositiveInt, optional): Current timestamp,\n                defaults to current time in milliseconds\n\n        Returns:\n            str: access token\n        \"\"\"\n        auth_params = AuthParams(timestamp=timestamp, expires_at=expires_at)\n        response = self.put_auth(auth_params)\n        self.access_token = response.token.secret\n        self.session.headers.update({\"Authorization\": f\"Bearer {self.access_token}\"})\n        return self.access_token\n\n    def generate_custody_auth_header(self, params: AuthParams) -&gt; str:\n\"\"\"Generate a custody authorization header. Usually invoked from create_new_auth_token.\n\n        Args:\n            params (AuthParams): authorization parameters\n\n        Raises:\n            Exception: Wallet is required\n\n        Returns:\n            str: custody authorization header\n        \"\"\"\n        if not self.wallet:\n            raise Exception(\"Wallet not set\")\n        auth_put_request = AuthPutRequest(params=params)\n        payload = auth_put_request.dict(by_alias=True)\n        encoded_payload = canonicaljson.encode_canonical_json(payload)\n        signable_message = encode_defunct(primitive=encoded_payload)\n        signed_message = self.wallet.sign_message(signable_message)\n        data_hex_array = bytearray(signed_message.signature)\n        encoded = base64.b64encode(data_hex_array).decode()\n        return f\"Bearer eip191:{encoded}\"\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.create_new_auth_token","title":"<code>create_new_auth_token(expires_at, timestamp=int(time.time() * 1000))</code>","text":"<p>Create a new access token for a user from the wallet credentials</p> <p>Parameters:</p> Name Type Description Default <code>expires_at</code> <code>PositiveInt</code> <p>Expiration date of the token</p> required <code>timestamp</code> <code>PositiveInt</code> <p>Current timestamp, defaults to current time in milliseconds</p> <code>int(time.time() * 1000)</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>access token</p> Source code in <code>farcaster/client.py</code> <pre><code>def create_new_auth_token(\n    self, expires_at: PositiveInt, timestamp: PositiveInt = int(time.time() * 1000)\n) -&gt; str:\n\"\"\"Create a new access token for a user from the wallet credentials\n\n    Args:\n        expires_at (PositiveInt): Expiration date of the token\n        timestamp (PositiveInt, optional): Current timestamp,\n            defaults to current time in milliseconds\n\n    Returns:\n        str: access token\n    \"\"\"\n    auth_params = AuthParams(timestamp=timestamp, expires_at=expires_at)\n    response = self.put_auth(auth_params)\n    self.access_token = response.token.secret\n    self.session.headers.update({\"Authorization\": f\"Bearer {self.access_token}\"})\n    return self.access_token\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.delete_auth","title":"<code>delete_auth(timestamp)</code>","text":"<p>Delete an access token</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>PositiveInt</code> <p>The timestamp of the access token to delete</p> required <p>Returns:</p> Name Type Description <code>StatusResponse</code> <code>StatusResponse</code> <p>Status of the deletion</p> Source code in <code>farcaster/client.py</code> <pre><code>def delete_auth(self, timestamp: PositiveInt) -&gt; StatusResponse:\n\"\"\"Delete an access token\n\n    Args:\n        timestamp (PositiveInt): The timestamp of the access\n            token to delete\n\n    Returns:\n        StatusResponse: Status of the deletion\n    \"\"\"\n    body = AuthDeleteRequest(params=Timestamp(timestamp=timestamp))\n    response = self._delete(\n        \"auth\",\n        json=body.dict(by_alias=True),\n    )\n    return StatusResponse(**response)\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.delete_cast","title":"<code>delete_cast(cast_hash)</code>","text":"<p>Delete a cast</p> <p>Parameters:</p> Name Type Description Default <code>cast_hash</code> <code>str</code> <p>the hash of the cast to delete</p> required <p>Returns:</p> Name Type Description <code>StatusResponse</code> <code>StatusResponse</code> <p>Status of the deletion</p> Source code in <code>farcaster/client.py</code> <pre><code>def delete_cast(self, cast_hash: str) -&gt; StatusResponse:\n\"\"\"Delete a cast\n\n    Args:\n        cast_hash (str): the hash of the cast to delete\n\n    Returns:\n        StatusResponse: Status of the deletion\n    \"\"\"\n    body = CastHash(cast_hash=cast_hash)\n    response = self._delete(\n        \"casts\",\n        json=body.dict(by_alias=True),\n    )\n    return StatusResponse(**response)\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.delete_cast_likes","title":"<code>delete_cast_likes(cast_hash, body)</code>","text":"<p>Remove a like from a cast</p> <p>Parameters:</p> Name Type Description Default <code>cast_hash</code> <code>str</code> <p>hash of the cast to unlike</p> required <code>body</code> <code>CastHash</code> <p>hash of the cast to unlike</p> required <p>Returns:</p> Name Type Description <code>StatusResponse</code> <code>StatusResponse</code> <p>Status of the deletion</p> Source code in <code>farcaster/client.py</code> <pre><code>def delete_cast_likes(self, cast_hash: str, body: CastHash) -&gt; StatusResponse:\n\"\"\"Remove a like from a cast\n\n    Args:\n        cast_hash (str): hash of the cast to unlike\n        body (CastHash): hash of the cast to unlike\n\n    Returns:\n        StatusResponse: Status of the deletion\n    \"\"\"\n    response = self._delete(\n        \"cast-likes\",\n        params={\"castHash\": cast_hash},\n        json=body.dict(by_alias=True),\n    )\n    return StatusResponse(**response)\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.delete_recast","title":"<code>delete_recast(cast_hash)</code>","text":"<p>Delete a recast</p> <p>Parameters:</p> Name Type Description Default <code>cast_hash</code> <code>str</code> <p>the cast hash</p> required <p>Returns:</p> Name Type Description <code>StatusResponse</code> <code>StatusResponse</code> <p>Status of the recast deletion</p> Source code in <code>farcaster/client.py</code> <pre><code>def delete_recast(self, cast_hash: str) -&gt; StatusResponse:\n\"\"\"Delete a recast\n\n    Args:\n        cast_hash (str): the cast hash\n\n    Returns:\n        StatusResponse: Status of the recast deletion\n    \"\"\"\n    body = CastHash(cast_hash=cast_hash)\n    response = self._delete(\n        \"recasts\",\n        json=body.dict(by_alias=True),\n    )\n    return StatusResponse(**response)\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.follow_user","title":"<code>follow_user(fid)</code>","text":"<p>Follow a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>PositiveInt</code> <p>Farcaster ID of the user to follow</p> required <p>Returns:</p> Name Type Description <code>StatusResponse</code> <code>StatusResponse</code> <p>Status of the follow</p> Source code in <code>farcaster/client.py</code> <pre><code>def follow_user(self, fid: PositiveInt) -&gt; StatusResponse:\n\"\"\"Follow a user\n\n    Args:\n        fid (PositiveInt): Farcaster ID of the user to follow\n\n    Returns:\n        StatusResponse: Status of the follow\n    \"\"\"\n    body = FollowsPutRequest(target_fid=fid)\n    response = self._put(\n        \"follows\",\n        json=body.dict(by_alias=True),\n    )\n    return StatusResponse(**response)\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.generate_custody_auth_header","title":"<code>generate_custody_auth_header(params)</code>","text":"<p>Generate a custody authorization header. Usually invoked from create_new_auth_token.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>AuthParams</code> <p>authorization parameters</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Wallet is required</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>custody authorization header</p> Source code in <code>farcaster/client.py</code> <pre><code>def generate_custody_auth_header(self, params: AuthParams) -&gt; str:\n\"\"\"Generate a custody authorization header. Usually invoked from create_new_auth_token.\n\n    Args:\n        params (AuthParams): authorization parameters\n\n    Raises:\n        Exception: Wallet is required\n\n    Returns:\n        str: custody authorization header\n    \"\"\"\n    if not self.wallet:\n        raise Exception(\"Wallet not set\")\n    auth_put_request = AuthPutRequest(params=params)\n    payload = auth_put_request.dict(by_alias=True)\n    encoded_payload = canonicaljson.encode_canonical_json(payload)\n    signable_message = encode_defunct(primitive=encoded_payload)\n    signed_message = self.wallet.sign_message(signable_message)\n    data_hex_array = bytearray(signed_message.signature)\n    encoded = base64.b64encode(data_hex_array).decode()\n    return f\"Bearer eip191:{encoded}\"\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_all_casts_in_thread","title":"<code>get_all_casts_in_thread(thread_hash)</code>","text":"<p>Get all casts in a thread</p> <p>Parameters:</p> Name Type Description Default <code>thread_hash</code> <code>str</code> <p>hash of the thread</p> required <p>Returns:</p> Name Type Description <code>CastsResult</code> <code>CastsResult</code> <p>Model containing the casts</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_all_casts_in_thread(\n    self,\n    thread_hash: str,\n) -&gt; CastsResult:\n\"\"\"Get all casts in a thread\n\n    Args:\n        thread_hash (str): hash of the thread\n\n    Returns:\n        CastsResult: Model containing the casts\n    \"\"\"\n    response = self._get(\n        \"all-casts-in-thread\",\n        params={\"threadHash\": thread_hash},\n    )\n    return CastsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_asset","title":"<code>get_asset(token_id)</code>","text":"<p>Get asset information</p> <p>Parameters:</p> Name Type Description Default <code>token_id</code> <code>int</code> <p>token ID</p> required <p>Returns:</p> Name Type Description <code>AssetResult</code> <code>AssetResult</code> <p>token information</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_asset(self, token_id: int) -&gt; AssetResult:\n\"\"\"Get asset information\n\n    Args:\n        token_id (int): token ID\n\n    Returns:\n        AssetResult: token information\n    \"\"\"\n    response = self._get(\"asset\", {\"token_id\": token_id})\n    return AssetGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_asset_events","title":"<code>get_asset_events(cursor=None, limit=25)</code>","text":"<p>Get events for a given asset</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>events to receive, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>EventsResult</code> <code>EventsResult</code> <p>Returns the EventsResult model</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_asset_events(\n    self,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; EventsResult:\n\"\"\"Get events for a given asset\n\n    Args:\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): events to receive, defaults\n            to 25\n\n    Returns:\n        EventsResult: Returns the EventsResult model\n    \"\"\"\n    response = self._get(\n        \"asset-events\",\n        params={\"cursor\": cursor, \"limit\": limit},\n    )\n    return AssetEventsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_cast","title":"<code>get_cast(hash)</code>","text":"<p>Get a specific cast</p> <p>Parameters:</p> Name Type Description Default <code>hash</code> <code>str</code> <p>cast hash</p> required <p>Returns:</p> Name Type Description <code>CastContent</code> <code>CastContent</code> <p>The cast content</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_cast(\n    self,\n    hash: str,\n) -&gt; CastContent:\n\"\"\"Get a specific cast\n\n    Args:\n        hash (str): cast hash\n\n    Returns:\n        CastContent: The cast content\n    \"\"\"\n    response = self._get(\n        \"cast\",\n        params={\"hash\": hash},\n    )\n    return CastGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_cast_likes","title":"<code>get_cast_likes(cast_hash, cursor=None, limit=25)</code>","text":"<p>Get the likes for a given cast</p> <p>Parameters:</p> Name Type Description Default <code>cast_hash</code> <code>str</code> <p>cast hash</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>ReactionsResult</code> <code>ReactionsResult</code> <p>ReactionsResult model of likes</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_cast_likes(\n    self,\n    cast_hash: str,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; ReactionsResult:\n\"\"\"Get the likes for a given cast\n\n    Args:\n        cast_hash (str): cast hash\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        ReactionsResult: ReactionsResult model of likes\n    \"\"\"\n    response = self._get(\n        \"cast-likes\",\n        params={\"castHash\": cast_hash, \"cursor\": cursor, \"limit\": limit},\n    )\n    return CastReactionsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_cast_recasters","title":"<code>get_cast_recasters(cast_hash, cursor=None, limit=25)</code>","text":"<p>Get the recasters for a given cast</p> <p>Parameters:</p> Name Type Description Default <code>cast_hash</code> <code>str</code> <p>cast hash</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>UsersResult</code> <code>UsersResult</code> <p>Model containing the recasters</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_cast_recasters(\n    self,\n    cast_hash: str,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; UsersResult:\n\"\"\"Get the recasters for a given cast\n\n    Args:\n        cast_hash (str): cast hash\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        UsersResult: Model containing the recasters\n    \"\"\"\n    response = self._get(\n        \"cast-recasters\",\n        params={\"castHash\": cast_hash, \"cursor\": cursor, \"limit\": limit},\n    )\n    return CastRecastersGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_casts","title":"<code>get_casts(fid, cursor=None, limit=25)</code>","text":"<p>Get the casts for a given fid of a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>CastsResult</code> <code>CastsResult</code> <p>Model containing the casts</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_casts(\n    self,\n    fid: int,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; CastsResult:\n\"\"\"Get the casts for a given fid of a user\n\n    Args:\n        fid (int): Farcaster ID of the user\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        CastsResult: Model containing the casts\n    \"\"\"\n    response = self._get(\n        \"casts\",\n        params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n    )\n    return CastsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_collection","title":"<code>get_collection(collection_id)</code>","text":"<p>Get a specific collection</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>OpenSea collection ID</p> required <p>Returns:</p> Name Type Description <code>CollectionResult</code> <code>CollectionResult</code> <p>collection</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_collection(self, collection_id: str) -&gt; CollectionResult:\n\"\"\"Get a specific collection\n\n    Args:\n        collection_id (str): OpenSea collection ID\n\n    Returns:\n        CollectionResult: collection\n    \"\"\"\n    response = self._get(\n        \"collection\",\n        params={\"collectionId\": collection_id},\n    )\n    return CollectionGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_collection_activity","title":"<code>get_collection_activity(collection_id, cursor=None, limit=25)</code>","text":"<p>Get collection activity</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>OpenSea collection ID</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>EventsResult</code> <code>EventsResult</code> <p>Model containing events</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_collection_activity(\n    self,\n    collection_id: str,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; EventsResult:\n\"\"\"Get collection activity\n\n    Args:\n        collection_id (str): OpenSea collection ID\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        EventsResult: Model containing events\n    \"\"\"\n    response = self._get(\n        \"collection-activity\",\n        params={\"collectionId\": collection_id, \"cursor\": cursor, \"limit\": limit},\n    )\n    return CollectionActivityGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_collection_assets","title":"<code>get_collection_assets(collection_id, cursor=None, limit=25)</code>","text":"<p>Get assets in an OpenSea collection</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>OpenSea collection ID</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>AssetsResult</code> <code>AssetsResult</code> <p>model containing assets</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_collection_assets(\n    self,\n    collection_id: str,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; AssetsResult:\n\"\"\"Get assets in an OpenSea collection\n\n    Args:\n        collection_id (str): OpenSea collection ID\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        AssetsResult: model containing assets\n    \"\"\"\n    response = self._get(\n        \"collection-assets\",\n        params={\"collectionId\": collection_id, \"cursor\": cursor, \"limit\": limit},\n    )\n    return CollectionAssetsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_collection_owners","title":"<code>get_collection_owners(collection_id, cursor=None, limit=25)</code>","text":"<p>Get the owners of an OpenSea collection</p> <p>Parameters:</p> Name Type Description Default <code>collection_id</code> <code>str</code> <p>OpenSea collection ID</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>UsersResult</code> <code>UsersResult</code> <p>model containing users</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_collection_owners(\n    self,\n    collection_id: str,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; UsersResult:\n\"\"\"Get the owners of an OpenSea collection\n\n    Args:\n        collection_id (str): OpenSea collection ID\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        UsersResult: model containing users\n    \"\"\"\n    response = self._get(\n        \"collection-owners\",\n        params={\"collectionId\": collection_id, \"cursor\": cursor, \"limit\": limit},\n    )\n    return CollectionOwnersGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_custody_address","title":"<code>get_custody_address(username=None, fid=None)</code>","text":"<p>Get the custody address of a user</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>NoneStr</code> <p>username of a user, defaults to None</p> <code>None</code> <code>fid</code> <code>Optional[int]</code> <p>Farcaster ID, defaults to None</p> <code>None</code> <p>Returns:</p> Name Type Description <code>CustodyAddress</code> <code>CustodyAddress</code> <p>model containing the custody address</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_custody_address(\n    self,\n    username: NoneStr = None,\n    fid: Optional[int] = None,\n) -&gt; CustodyAddress:\n\"\"\"Get the custody address of a user\n\n    Args:\n        username (NoneStr, optional): username of a user, defaults\n            to None\n        fid (Optional[int], optional): Farcaster ID, defaults to\n            None\n\n    Returns:\n        CustodyAddress: model containing the custody address\n    \"\"\"\n    assert username or fid, \"fname or fid must be provided\"\n    response = self._get(\n        \"custody-address\",\n        params={\"fname\": username, \"fid\": fid},\n    )\n    return CustodyAddressGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_followers","title":"<code>get_followers(fid, cursor=None, limit=25)</code>","text":"<p>Get the followers of a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>UsersResult</code> <code>UsersResult</code> <p>model containing users</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_followers(\n    self,\n    fid: int,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; UsersResult:\n\"\"\"Get the followers of a user\n\n    Args:\n        fid (int): Farcaster ID of the user\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        UsersResult: model containing users\n    \"\"\"\n    response = self._get(\n        \"followers\",\n        params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n    )\n    return FollowersGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_following","title":"<code>get_following(fid, cursor=None, limit=25)</code>","text":"<p>Get the users a user is following</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>UsersResult</code> <code>UsersResult</code> <p>model containing users</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_following(\n    self,\n    fid: int,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; UsersResult:\n\"\"\"Get the users a user is following\n\n    Args:\n        fid (int): Farcaster ID of the user\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        UsersResult: model containing users\n    \"\"\"\n    response = self._get(\n        \"following\",\n        params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n    )\n    return FollowingGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_healthcheck","title":"<code>get_healthcheck()</code>","text":"<p>Check if API is up and running</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Status of the API</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_healthcheck(self) -&gt; bool:\n\"\"\"Check if API is up and running\n\n    Returns:\n        bool: Status of the API\n    \"\"\"\n    response = self.session.get(\"https://api.farcaster.xyz/healthcheck\")\n    return response.ok\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_me","title":"<code>get_me()</code>","text":"<p>Get the current user</p> <p>Returns:</p> Name Type Description <code>UserResult</code> <code>UserResult</code> <p>model containing the current user</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_me(self) -&gt; UserResult:\n\"\"\"Get the current user\n\n    Returns:\n        UserResult: model containing the current user\n    \"\"\"\n    response = self._get(\n        \"me\",\n    )\n    response_model = MeGetResponse(**response).result\n    self.config.username = response_model.user.username\n    return response_model\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_mention_and_reply_notifications","title":"<code>get_mention_and_reply_notifications(cursor=None, limit=25)</code>","text":"<p>Get mention and reply notifications</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>NotificationsResult</code> <code>NotificationsResult</code> <p>model containing notifications</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_mention_and_reply_notifications(\n    self,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; NotificationsResult:\n\"\"\"Get mention and reply notifications\n\n    Args:\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        NotificationsResult: model containing notifications\n    \"\"\"\n    response = self._get(\n        \"mention-and-reply-notifications\",\n        params={\"cursor\": cursor, \"limit\": limit},\n    )\n    return MentionAndReplyNotificationsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_recent_casts","title":"<code>get_recent_casts(cursor=None, limit=100)</code>","text":"<p>Get all recent casts</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 100</p> <code>100</code> <p>Returns:</p> Name Type Description <code>CastsResult</code> <code>CastsResult</code> <p>model containing casts</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_recent_casts(\n    self,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 100,\n) -&gt; CastsResult:\n\"\"\"Get all recent casts\n\n    Args:\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 100\n\n    Returns:\n        CastsResult: model containing casts\n    \"\"\"\n    response = self._get(\n        \"recent-casts\",\n        params={\"cursor\": cursor, \"limit\": limit},\n    )\n    return CastsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_recent_users","title":"<code>get_recent_users(cursor=None, limit=25)</code>","text":"<p>Get recent users</p> <p>Parameters:</p> Name Type Description Default <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>UsersResult</code> <code>UsersResult</code> <p>model containing users</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_recent_users(\n    self,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; UsersResult:\n\"\"\"Get recent users\n\n    Args:\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        UsersResult: model containing users\n    \"\"\"\n    response = self._get(\n        \"recent-users\",\n        params={\"cursor\": cursor, \"limit\": limit},\n    )\n    return UsersGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_user","title":"<code>get_user(fid)</code>","text":"<p>Get a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <p>Returns:</p> Name Type Description <code>UserResult</code> <code>UserResult</code> <p>model containing the user</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_user(self, fid: int) -&gt; UserResult:\n\"\"\"Get a user\n\n    Args:\n        fid (int): Farcaster ID of the user\n\n    Returns:\n        UserResult: model containing the user\n    \"\"\"\n    response = self._get(\n        \"user\",\n        params={\"fid\": fid},\n    )\n    return UserGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_user_by_username","title":"<code>get_user_by_username(username)</code>","text":"<p>Get a user by username</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>username of the user</p> required <p>Returns:</p> Name Type Description <code>UserResult</code> <code>UserResult</code> <p>model containing the user</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_user_by_username(\n    self,\n    username: str,\n) -&gt; UserResult:\n\"\"\"Get a user by username\n\n    Args:\n        username (str): username of the user\n\n    Returns:\n        UserResult: model containing the user\n    \"\"\"\n    response = self._get(\n        \"user-by-username\",\n        params={\"username\": username},\n    )\n    return UserByUsernameGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_user_by_verification","title":"<code>get_user_by_verification(address)</code>","text":"<p>Get a user by verification address</p> <p>Parameters:</p> Name Type Description Default <code>address</code> <code>str</code> <p>address of the user</p> required <p>Returns:</p> Name Type Description <code>UserResult</code> <code>UserResult</code> <p>model containing the user</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_user_by_verification(\n    self,\n    address: str,\n) -&gt; UserResult:\n\"\"\"Get a user by verification address\n\n    Args:\n        address (str): address of the user\n\n    Returns:\n        UserResult: model containing the user\n    \"\"\"\n    response = self._get(\n        \"user-by-verification\",\n        params={\"address\": address},\n    )\n    return UserByUsernameGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_user_cast_likes","title":"<code>get_user_cast_likes(fid, cursor=None, limit=25)</code>","text":"<p>Get the likes of a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>Likes</code> <code>Likes</code> <p>model containing likes</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_user_cast_likes(\n    self,\n    fid: int,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; Likes:\n\"\"\"Get the likes of a user\n\n    Args:\n        fid (int): Farcaster ID of the user\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        Likes: model containing likes\n    \"\"\"\n    response = self._get(\n        \"user-cast-likes\",\n        params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n    )\n    return UserCastLikesGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_user_collections","title":"<code>get_user_collections(owner_fid, cursor=None, limit=25)</code>","text":"<p>Get the collections of a user</p> <p>Parameters:</p> Name Type Description Default <code>owner_fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>CollectionsResult</code> <code>CollectionsResult</code> <p>model containing collections</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_user_collections(\n    self,\n    owner_fid: int,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; CollectionsResult:\n\"\"\"Get the collections of a user\n\n    Args:\n        owner_fid (int): Farcaster ID of the user\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        CollectionsResult: model containing collections\n    \"\"\"\n    response = self._get(\n        \"user-collections\",\n        params={\"ownerFid\": owner_fid, \"cursor\": cursor, \"limit\": limit},\n    )\n    return UserCollectionsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.get_verifications","title":"<code>get_verifications(fid, cursor=None, limit=25)</code>","text":"<p>Get the verifications of a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>int</code> <p>Farcaster ID of the user</p> required <code>cursor</code> <code>NoneStr</code> <p>cursor, defaults to None</p> <code>None</code> <code>limit</code> <code>PositiveInt</code> <p>limit, defaults to 25</p> <code>25</code> <p>Returns:</p> Name Type Description <code>VerificationsResult</code> <code>VerificationsResult</code> <p>model containing verifications</p> Source code in <code>farcaster/client.py</code> <pre><code>def get_verifications(\n    self,\n    fid: int,\n    cursor: NoneStr = None,\n    limit: PositiveInt = 25,\n) -&gt; VerificationsResult:\n\"\"\"Get the verifications of a user\n\n    Args:\n        fid (int): Farcaster ID of the user\n        cursor (NoneStr, optional): cursor, defaults to None\n        limit (PositiveInt, optional): limit, defaults to 25\n\n    Returns:\n        VerificationsResult: model containing verifications\n    \"\"\"\n    response = self._get(\n        \"verifications\",\n        params={\"fid\": fid, \"cursor\": cursor, \"limit\": limit},\n    )\n    return VerificationsGetResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.like_cast","title":"<code>like_cast(body)</code>","text":"<p>Like a given cast</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>CastHash</code> <p>hash of the cast to like</p> required <p>Returns:</p> Name Type Description <code>ReactionsResult</code> <code>ReactionsResult</code> <p>Result of liking the cast</p> Source code in <code>farcaster/client.py</code> <pre><code>def like_cast(self, body: CastHash) -&gt; ReactionsResult:\n\"\"\"Like a given cast\n\n    Args:\n        body (CastHash): hash of the cast to like\n\n    Returns:\n        ReactionsResult: Result of liking the cast\n    \"\"\"\n    response = self._put(\n        \"cast-likes\",\n        json=body.dict(by_alias=True),\n    )\n    return CastReactionsPutResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.post_cast","title":"<code>post_cast(body)</code>","text":"<p>Post a cast to Farcaster</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>CastsPostRequest</code> <p>The cast data structure</p> required <p>Returns:</p> Name Type Description <code>CastContent</code> <code>CastContent</code> <p>The result of posting the cast</p> Source code in <code>farcaster/client.py</code> <pre><code>def post_cast(self, body: CastsPostRequest) -&gt; CastContent:\n\"\"\"Post a cast to Farcaster\n\n    Args:\n        body (CastsPostRequest): The cast data structure\n\n    Returns:\n        CastContent: The result of posting the cast\n    \"\"\"\n    response = self._post(\n        \"casts\",\n        json=body.dict(by_alias=True),\n    )\n    return CastsPostResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.put_auth","title":"<code>put_auth(auth_params)</code>","text":"<p>Generate a custody bearer token and use it to generate an access token</p> <p>Parameters:</p> Name Type Description Default <code>auth_params</code> <code>AuthParams</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>TokenResult</code> <code>TokenResult</code> <p>description</p> Source code in <code>farcaster/client.py</code> <pre><code>def put_auth(self, auth_params: AuthParams) -&gt; TokenResult:\n\"\"\"Generate a custody bearer token and use it to generate an access token\n\n    Args:\n        auth_params (AuthParams): _description_\n\n    Returns:\n        TokenResult: _description_\n    \"\"\"\n    header = self.generate_custody_auth_header(auth_params)\n    body = AuthPutRequest(params=auth_params)\n    response = requests.put(\n        \"https://api.farcaster.xyz/v2/auth\",\n        json=body.dict(by_alias=True),\n        headers={\"Authorization\": header},\n    ).json()\n    return AuthPutResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.recast","title":"<code>recast(cast_hash)</code>","text":"<p>Recast a cast</p> <p>Parameters:</p> Name Type Description Default <code>cast_hash</code> <code>str</code> <p>the cast hash</p> required <p>Returns:</p> Name Type Description <code>CastHash</code> <code>CastHash</code> <p>model containing the cast hash</p> Source code in <code>farcaster/client.py</code> <pre><code>def recast(self, cast_hash: str) -&gt; CastHash:\n\"\"\"Recast a cast\n\n    Args:\n        cast_hash (str): the cast hash\n\n    Returns:\n        CastHash: model containing the cast hash\n    \"\"\"\n    body = CastHash(cast_hash=cast_hash)\n    response = self._put(\n        \"recasts\",\n        json=body.dict(by_alias=True),\n    )\n    return RecastsPutResponse(**response).result\n</code></pre>"},{"location":"reference/#farcaster.client.MerkleApiClient.unfollow_user","title":"<code>unfollow_user(fid)</code>","text":"<p>Unfollow a user</p> <p>Parameters:</p> Name Type Description Default <code>fid</code> <code>PositiveInt</code> <p>Farcaster ID of the user to unfollow</p> required <p>Returns:</p> Name Type Description <code>StatusResponse</code> <code>StatusResponse</code> <p>Status of the unfollow</p> Source code in <code>farcaster/client.py</code> <pre><code>def unfollow_user(self, fid: PositiveInt) -&gt; StatusResponse:\n\"\"\"Unfollow a user\n\n    Args:\n        fid (PositiveInt): Farcaster ID of the user to unfollow\n\n    Returns:\n        StatusResponse: Status of the unfollow\n    \"\"\"\n    body = FollowsDeleteRequest(target_fid=fid)\n    response = self._delete(\n        \"follows\",\n        json=body.dict(by_alias=True),\n    )\n    return StatusResponse(**response)\n</code></pre>"}]}